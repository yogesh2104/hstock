// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  user
}

enum ReferralStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum PaymentStatus {
  PENDING   
  VERIFIED 
  REJECTED
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  companyName   String?
  email         String?         @unique
  emailVerified DateTime?
  role          Role     @default(user)
  isGetReferral Boolean
  password      String?
  phoneNumber   Float?
  address       String?
  address2      String?
  country       String?
  city          String?
  state         String?
  pincode       Float?
  image         String?
  active        Boolean @default(true)
  buyId         String?
  accounts      Account[]
  sessions      Session[]
  
  Authenticator Authenticator[]

  licenses      License[]
  transactions  Transaction[]
  payments      Payment[]      
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  licenseId     String      @unique @db.ObjectId
  license       License     @relation(fields: [licenseId], references: [id])
  buyer         User        @relation(fields: [buyerId], references: [id])
  buyerId       String      @db.ObjectId
  amount        Float
  currency      String      @default("INR")
  paymentStatus String      @default("success") // success, failed, pending
  createdAt     DateTime    @default(now())
}

model License {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  key           String      @unique
  productName   String
  buyer         User        @relation(fields: [buyerId], references: [id])
  buyerId       String      @db.ObjectId
  purchaseDate  DateTime    @default(now())
  expiryDate    DateTime
  status        String      @default("active") // active, expired, revoked
  message       String?
  transaction   Transaction?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique

  expires DateTime

  @@unique([email, token])
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model contact {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  code       String         @unique
  discount   Float          @default(0)
  minPrice   Float          @default(0)
  status     ReferralStatus @default(ACTIVE)
  expiresAt  DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Title {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String   @unique
  video   Video[]  @relation("TitleToVideo")
}

model Video {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  titleId       String   @db.ObjectId
  title         Title    @relation("TitleToVideo", fields: [titleId], references: [id])
  isActive      Boolean  @default(true)
  videoSrc      String
  thumbnailSrc  String
  thumbnailAlt  String
}

model Plan {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  planID       String
  logo         String   @default("/logo.png")
  price        Int
  description  String   
  buttonText   String   @default("Buy Now")
  popular      Boolean? @default(false)
  features     String[]
  position     Int      @default(1)
  payments     Payment[]
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  planId        String        @db.ObjectId
  amount        Float
  discount      Float          @default(0)
  finalAmount   Float
  transactionId String
  status        PaymentStatus  @default(PENDING)
  referralCode  String? 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}

model HeroSection {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  btnText   String  @default("Buy Now")
  btnLink   String  @default("/#pricing-plan")
  isShow    Boolean @default(false)
  image     Image[] @relation("HeroImg")
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  imageId   String    @db.ObjectId
  isActive  Boolean   @default(true)
  imageLink String    
  path      HeroSection @relation("HeroImg", fields: [imageId], references: [id], onDelete:Cascade)
}
model FeatureSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  emailTitle  String
  htmlContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model FeatureSection {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   emailTitle  String
//   htmlContent String
//   content     Json
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }